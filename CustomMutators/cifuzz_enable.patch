3,26c3,11
< # Copyright (c) 2018-2022 Cosmin Truta
< # Copyright (c) 2007,2009-2018 Glenn Randers-Pehrson
< # Written by Christian Ehrlicher, 2007
< # Revised by Roger Lowman, 2009-2010
< # Revised by Clifford Yapp, 2011-2012,2017
< # Revised by Roger Leigh, 2016
< # Revised by Andreas Franek, 2016
< # Revised by Sam Serrels, 2017
< # Revised by Vadim Barkov, 2017
< # Revised by Vicky Pfau, 2018
< # Revised by Cameron Cawley, 2018,2021
< # Revised by Kyle Bentley, 2018
< # Revised by David Callu, 2020
< # Revised by Steve Robinson, 2020
< # Revised by Simon Hausmann, 2020
< # Revised by Alex Gaynor, 2020
< # Revised by Owen Rudge, 2020
< # Revised by Gleb Mazovetskiy, 2021
< # Revised by Christopher Sean Morrison, 2022
< # Revised by Martin Storsjo, 2022
< 
< # This code is released under the libpng license.
< # For conditions of distribution and use, see the disclaimer
< # and license in png.h
---
> # Copyright (c) 2018-2022 Cosmin Truta Copyright (c) 2007,2009-2018 Glenn
> # Randers-Pehrson Written by Christian Ehrlicher, 2007 Revised by Roger Lowman,
> # 2009-2010 Revised by Clifford Yapp, 2011-2012,2017 Revised by Roger Leigh,
> # 2016 Revised by Andreas Franek, 2016 Revised by Sam Serrels, 2017 Revised by
> # Vadim Barkov, 2017 Revised by Vicky Pfau, 2018 Revised by Cameron Cawley,
> # 2018,2021 Revised by Kyle Bentley, 2018 Revised by David Callu, 2020 Revised
> # by Steve Robinson, 2020 Revised by Simon Hausmann, 2020 Revised by Alex
> # Gaynor, 2020 Revised by Owen Rudge, 2020 Revised by Gleb Mazovetskiy, 2021
> # Revised by Christopher Sean Morrison, 2022 Revised by Martin Storsjo, 2022
28,29c13,14
< cmake_minimum_required(VERSION 3.1)
< cmake_policy(VERSION 3.1)
---
> # This code is released under the libpng license. For conditions of distribution
> # and use, see the disclaimer and license in png.h
31c16,19
< project(libpng C ASM)
---
> cmake_minimum_required(VERSION 3.16)
> cmake_policy(VERSION 3.16)
> 
> project(libpng C ASM CXX)
38c26
< #set(PNGLIB_SUBREVISION "git")
---
> # set(PNGLIB_SUBREVISION "git")
42c30,35
< set(PNGLIB_SHARED_VERSION ${PNGLIB_SHARED_SOVERSION}.${PNGLIB_REVISION}.${PNGLIB_SUBREVISION})
---
> set(PNGLIB_SHARED_VERSION
>     ${PNGLIB_SHARED_SOVERSION}.${PNGLIB_REVISION}.${PNGLIB_SUBREVISION})
> 
> # Enable fuzz testing with cifuzz
> find_package(cifuzz NO_SYSTEM_ENVIRONMENT_PATH)
> enable_fuzz_testing()
46,47c39,40
< # Allow users to specify location of zlib.
< # Useful if zlib is being built alongside this as a sub-project.
---
> # Allow users to specify location of zlib. Useful if zlib is being built
> # alongside this as a sub-project.
55c48,52
< if(UNIX AND NOT APPLE AND NOT BEOS AND NOT HAIKU AND NOT EMSCRIPTEN)
---
> if(UNIX
>    AND NOT APPLE
>    AND NOT BEOS
>    AND NOT HAIKU
>    AND NOT EMSCRIPTEN)
76,84c73,85
< set(PNG_PREFIX "" CACHE STRING "Prefix to add to the API function names")
< set(DFA_XTRA "" CACHE FILEPATH "File containing extra configuration settings")
< 
< # CMake currently sets CMAKE_SYSTEM_PROCESSOR to one of x86_64 or arm64 on macOS,
< # based upon the OS architecture, not the target architecture. As such, we need
< # to check CMAKE_OSX_ARCHITECTURES to identify which hardware-specific flags to
< # enable. Note that this will fail if you attempt to build a universal binary in
< # a single CMake invocation.
< if (APPLE AND CMAKE_OSX_ARCHITECTURES)
---
> set(PNG_PREFIX
>     ""
>     CACHE STRING "Prefix to add to the API function names")
> set(DFA_XTRA
>     ""
>     CACHE FILEPATH "File containing extra configuration settings")
> 
> # CMake currently sets CMAKE_SYSTEM_PROCESSOR to one of x86_64 or arm64 on
> # macOS, based upon the OS architecture, not the target architecture. As such,
> # we need to check CMAKE_OSX_ARCHITECTURES to identify which hardware-specific
> # flags to enable. Note that this will fail if you attempt to build a universal
> # binary in a single CMake invocation.
> if(APPLE AND CMAKE_OSX_ARCHITECTURES)
92,119c93,124
< # Set definitions and sources for ARM.
< if(TARGET_ARCH MATCHES "^arm" OR
<    TARGET_ARCH MATCHES "^aarch64")
<   if(TARGET_ARCH MATCHES "^arm64" OR
<      TARGET_ARCH MATCHES "^aarch64")
<     set(PNG_ARM_NEON_POSSIBLE_VALUES on off)
<     set(PNG_ARM_NEON "on"
<         CACHE STRING "Enable ARM NEON optimizations: on|off; on is default")
<   else()
<     set(PNG_ARM_NEON_POSSIBLE_VALUES check on off)
<     set(PNG_ARM_NEON "off"
<         CACHE STRING "Enable ARM NEON optimizations: check|on|off; off is default")
<   endif()
<   set_property(CACHE PNG_ARM_NEON
<                PROPERTY STRINGS ${PNG_ARM_NEON_POSSIBLE_VALUES})
<   list(FIND PNG_ARM_NEON_POSSIBLE_VALUES ${PNG_ARM_NEON} index)
<   if(index EQUAL -1)
<     message(FATAL_ERROR "PNG_ARM_NEON must be one of [${PNG_ARM_NEON_POSSIBLE_VALUES}]")
<   elseif(NOT ${PNG_ARM_NEON} STREQUAL "off")
<     set(libpng_arm_sources
<         arm/arm_init.c
<         arm/filter_neon.S
<         arm/filter_neon_intrinsics.c
<         arm/palette_neon_intrinsics.c)
<     if(${PNG_ARM_NEON} STREQUAL "on")
<       add_definitions(-DPNG_ARM_NEON_OPT=2)
<     elseif(${PNG_ARM_NEON} STREQUAL "check")
<       add_definitions(-DPNG_ARM_NEON_CHECK_SUPPORTED)
---
>   # Set definitions and sources for ARM.
>   if(TARGET_ARCH MATCHES "^arm" OR TARGET_ARCH MATCHES "^aarch64")
>     if(TARGET_ARCH MATCHES "^arm64" OR TARGET_ARCH MATCHES "^aarch64")
>       set(PNG_ARM_NEON_POSSIBLE_VALUES on off)
>       set(PNG_ARM_NEON
>           "on"
>           CACHE STRING "Enable ARM NEON optimizations: on|off; on is default")
>     else()
>       set(PNG_ARM_NEON_POSSIBLE_VALUES check on off)
>       set(PNG_ARM_NEON
>           "off"
>           CACHE STRING
>                 "Enable ARM NEON optimizations: check|on|off; off is default")
>     endif()
>     set_property(CACHE PNG_ARM_NEON PROPERTY STRINGS
>                                              ${PNG_ARM_NEON_POSSIBLE_VALUES})
>     list(FIND PNG_ARM_NEON_POSSIBLE_VALUES ${PNG_ARM_NEON} index)
>     if(index EQUAL -1)
>       message(
>         FATAL_ERROR
>           "PNG_ARM_NEON must be one of [${PNG_ARM_NEON_POSSIBLE_VALUES}]")
>     elseif(NOT ${PNG_ARM_NEON} STREQUAL "off")
>       set(libpng_arm_sources
>           arm/arm_init.c arm/filter_neon.S arm/filter_neon_intrinsics.c
>           arm/palette_neon_intrinsics.c)
>       if(${PNG_ARM_NEON} STREQUAL "on")
>         add_definitions(-DPNG_ARM_NEON_OPT=2)
>       elseif(${PNG_ARM_NEON} STREQUAL "check")
>         add_definitions(-DPNG_ARM_NEON_CHECK_SUPPORTED)
>       endif()
>     else()
>       add_definitions(-DPNG_ARM_NEON_OPT=0)
121,122d125
<   else()
<     add_definitions(-DPNG_ARM_NEON_OPT=0)
124d126
< endif()
126,142c128,148
< # Set definitions and sources for PowerPC.
< if(TARGET_ARCH MATCHES "^powerpc*" OR
<    TARGET_ARCH MATCHES "^ppc64*")
<   set(PNG_POWERPC_VSX_POSSIBLE_VALUES on off)
<   set(PNG_POWERPC_VSX "on"
<       CACHE STRING "Enable POWERPC VSX optimizations: on|off; on is default")
<   set_property(CACHE PNG_POWERPC_VSX
<                PROPERTY STRINGS ${PNG_POWERPC_VSX_POSSIBLE_VALUES})
<   list(FIND PNG_POWERPC_VSX_POSSIBLE_VALUES ${PNG_POWERPC_VSX} index)
<   if(index EQUAL -1)
<     message(FATAL_ERROR "PNG_POWERPC_VSX must be one of [${PNG_POWERPC_VSX_POSSIBLE_VALUES}]")
<   elseif(NOT ${PNG_POWERPC_VSX} STREQUAL "off")
<     set(libpng_powerpc_sources
<         powerpc/powerpc_init.c
<         powerpc/filter_vsx_intrinsics.c)
<     if(${PNG_POWERPC_VSX} STREQUAL "on")
<       add_definitions(-DPNG_POWERPC_VSX_OPT=2)
---
>   # Set definitions and sources for PowerPC.
>   if(TARGET_ARCH MATCHES "^powerpc*" OR TARGET_ARCH MATCHES "^ppc64*")
>     set(PNG_POWERPC_VSX_POSSIBLE_VALUES on off)
>     set(PNG_POWERPC_VSX
>         "on"
>         CACHE STRING "Enable POWERPC VSX optimizations: on|off; on is default")
>     set_property(CACHE PNG_POWERPC_VSX
>                  PROPERTY STRINGS ${PNG_POWERPC_VSX_POSSIBLE_VALUES})
>     list(FIND PNG_POWERPC_VSX_POSSIBLE_VALUES ${PNG_POWERPC_VSX} index)
>     if(index EQUAL -1)
>       message(
>         FATAL_ERROR
>           "PNG_POWERPC_VSX must be one of [${PNG_POWERPC_VSX_POSSIBLE_VALUES}]")
>     elseif(NOT ${PNG_POWERPC_VSX} STREQUAL "off")
>       set(libpng_powerpc_sources powerpc/powerpc_init.c
>                                  powerpc/filter_vsx_intrinsics.c)
>       if(${PNG_POWERPC_VSX} STREQUAL "on")
>         add_definitions(-DPNG_POWERPC_VSX_OPT=2)
>       endif()
>     else()
>       add_definitions(-DPNG_POWERPC_VSX_OPT=0)
144,145d149
<   else()
<     add_definitions(-DPNG_POWERPC_VSX_OPT=0)
147d150
< endif()
149,165c152,172
< # Set definitions and sources for Intel.
< if(TARGET_ARCH MATCHES "^i?86" OR
<    TARGET_ARCH MATCHES "^x86_64*")
<   set(PNG_INTEL_SSE_POSSIBLE_VALUES on off)
<   set(PNG_INTEL_SSE "on"
<       CACHE STRING "Enable INTEL_SSE optimizations: on|off; on is default")
<   set_property(CACHE PNG_INTEL_SSE
<                PROPERTY STRINGS ${PNG_INTEL_SSE_POSSIBLE_VALUES})
<   list(FIND PNG_INTEL_SSE_POSSIBLE_VALUES ${PNG_INTEL_SSE} index)
<   if(index EQUAL -1)
<     message(FATAL_ERROR "PNG_INTEL_SSE must be one of [${PNG_INTEL_SSE_POSSIBLE_VALUES}]")
<   elseif(NOT ${PNG_INTEL_SSE} STREQUAL "off")
<     set(libpng_intel_sources
<         intel/intel_init.c
<         intel/filter_sse2_intrinsics.c)
<     if(${PNG_INTEL_SSE} STREQUAL "on")
<       add_definitions(-DPNG_INTEL_SSE_OPT=1)
---
>   # Set definitions and sources for Intel.
>   if(TARGET_ARCH MATCHES "^i?86" OR TARGET_ARCH MATCHES "^x86_64*")
>     set(PNG_INTEL_SSE_POSSIBLE_VALUES on off)
>     set(PNG_INTEL_SSE
>         "on"
>         CACHE STRING "Enable INTEL_SSE optimizations: on|off; on is default")
>     set_property(CACHE PNG_INTEL_SSE PROPERTY STRINGS
>                                               ${PNG_INTEL_SSE_POSSIBLE_VALUES})
>     list(FIND PNG_INTEL_SSE_POSSIBLE_VALUES ${PNG_INTEL_SSE} index)
>     if(index EQUAL -1)
>       message(
>         FATAL_ERROR
>           "PNG_INTEL_SSE must be one of [${PNG_INTEL_SSE_POSSIBLE_VALUES}]")
>     elseif(NOT ${PNG_INTEL_SSE} STREQUAL "off")
>       set(libpng_intel_sources intel/intel_init.c
>                                intel/filter_sse2_intrinsics.c)
>       if(${PNG_INTEL_SSE} STREQUAL "on")
>         add_definitions(-DPNG_INTEL_SSE_OPT=1)
>       endif()
>     else()
>       add_definitions(-DPNG_INTEL_SSE_OPT=0)
167,168d173
<   else()
<     add_definitions(-DPNG_INTEL_SSE_OPT=0)
170d174
< endif()
172,188c176,195
< # Set definitions and sources for MIPS.
< if(TARGET_ARCH MATCHES "mipsel*" OR
<    TARGET_ARCH MATCHES "mips64el*")
<   set(PNG_MIPS_MSA_POSSIBLE_VALUES on off)
<   set(PNG_MIPS_MSA "on"
<       CACHE STRING "Enable MIPS_MSA optimizations: on|off; on is default")
<   set_property(CACHE PNG_MIPS_MSA
<                PROPERTY STRINGS ${PNG_MIPS_MSA_POSSIBLE_VALUES})
<   list(FIND PNG_MIPS_MSA_POSSIBLE_VALUES ${PNG_MIPS_MSA} index)
<   if(index EQUAL -1)
<     message(FATAL_ERROR "PNG_MIPS_MSA must be one of [${PNG_MIPS_MSA_POSSIBLE_VALUES}]")
<   elseif(NOT ${PNG_MIPS_MSA} STREQUAL "off")
<     set(libpng_mips_sources
<         mips/mips_init.c
<         mips/filter_msa_intrinsics.c)
<     if(${PNG_MIPS_MSA} STREQUAL "on")
<       add_definitions(-DPNG_MIPS_MSA_OPT=2)
---
>   # Set definitions and sources for MIPS.
>   if(TARGET_ARCH MATCHES "mipsel*" OR TARGET_ARCH MATCHES "mips64el*")
>     set(PNG_MIPS_MSA_POSSIBLE_VALUES on off)
>     set(PNG_MIPS_MSA
>         "on"
>         CACHE STRING "Enable MIPS_MSA optimizations: on|off; on is default")
>     set_property(CACHE PNG_MIPS_MSA PROPERTY STRINGS
>                                              ${PNG_MIPS_MSA_POSSIBLE_VALUES})
>     list(FIND PNG_MIPS_MSA_POSSIBLE_VALUES ${PNG_MIPS_MSA} index)
>     if(index EQUAL -1)
>       message(
>         FATAL_ERROR
>           "PNG_MIPS_MSA must be one of [${PNG_MIPS_MSA_POSSIBLE_VALUES}]")
>     elseif(NOT ${PNG_MIPS_MSA} STREQUAL "off")
>       set(libpng_mips_sources mips/mips_init.c mips/filter_msa_intrinsics.c)
>       if(${PNG_MIPS_MSA} STREQUAL "on")
>         add_definitions(-DPNG_MIPS_MSA_OPT=2)
>       endif()
>     else()
>       add_definitions(-DPNG_MIPS_MSA_OPT=0)
190,191d196
<   else()
<     add_definitions(-DPNG_MIPS_MSA_OPT=0)
193d197
< endif()
197,201c201,204
< # Set definitions and sources for ARM.
< if(TARGET_ARCH MATCHES "^arm" OR
<    TARGET_ARCH MATCHES "^aarch64")
<   add_definitions(-DPNG_ARM_NEON_OPT=0)
< endif()
---
>   # Set definitions and sources for ARM.
>   if(TARGET_ARCH MATCHES "^arm" OR TARGET_ARCH MATCHES "^aarch64")
>     add_definitions(-DPNG_ARM_NEON_OPT=0)
>   endif()
203,207c206,209
< # Set definitions and sources for PowerPC.
< if(TARGET_ARCH MATCHES "^powerpc*" OR
<    TARGET_ARCH MATCHES "^ppc64*")
<   add_definitions(-DPNG_POWERPC_VSX_OPT=0)
< endif()
---
>   # Set definitions and sources for PowerPC.
>   if(TARGET_ARCH MATCHES "^powerpc*" OR TARGET_ARCH MATCHES "^ppc64*")
>     add_definitions(-DPNG_POWERPC_VSX_OPT=0)
>   endif()
209,213c211,214
< # Set definitions and sources for Intel.
< if(TARGET_ARCH MATCHES "^i?86" OR
<    TARGET_ARCH MATCHES "^x86_64*")
<   add_definitions(-DPNG_INTEL_SSE_OPT=0)
< endif()
---
>   # Set definitions and sources for Intel.
>   if(TARGET_ARCH MATCHES "^i?86" OR TARGET_ARCH MATCHES "^x86_64*")
>     add_definitions(-DPNG_INTEL_SSE_OPT=0)
>   endif()
215,219c216,219
< # Set definitions and sources for MIPS.
< if(TARGET_ARCH MATCHES "mipsel*" OR
<    TARGET_ARCH MATCHES "mips64el*")
<   add_definitions(-DPNG_MIPS_MSA_OPT=0)
< endif()
---
>   # Set definitions and sources for MIPS.
>   if(TARGET_ARCH MATCHES "mipsel*" OR TARGET_ARCH MATCHES "mips64el*")
>     add_definitions(-DPNG_MIPS_MSA_OPT=0)
>   endif()
231c231,233
< if(ld-version-script AND NOT ANDROID AND NOT APPLE)
---
> if(ld-version-script
>    AND NOT ANDROID
>    AND NOT APPLE)
233c235,237
<   file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/conftest.map" "
---
>   file(
>     WRITE "${CMAKE_CURRENT_BINARY_DIR}/conftest.map"
>     "
245,246c249,253
<   set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} "-Wl,--version-script='${CMAKE_CURRENT_BINARY_DIR}/conftest.map'")
<   check_c_source_compiles("void sym(void) {}
---
>   set(CMAKE_REQUIRED_FLAGS
>       ${CMAKE_REQUIRED_FLAGS}
>       "-Wl,--version-script='${CMAKE_CURRENT_BINARY_DIR}/conftest.map'")
>   check_c_source_compiles(
>     "void sym(void) {}
249c256,257
< " HAVE_LD_VERSION_SCRIPT)
---
> "
>     HAVE_LD_VERSION_SCRIPT)
251,252c259,263
<     set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS_SAVE} "-Wl,-M -Wl,${CMAKE_CURRENT_BINARY_DIR}/conftest.map")
<   check_c_source_compiles("void sym(void) {}
---
>     set(CMAKE_REQUIRED_FLAGS
>         ${CMAKE_REQUIRED_FLAGS_SAVE}
>         "-Wl,-M -Wl,${CMAKE_CURRENT_BINARY_DIR}/conftest.map")
>     check_c_source_compiles(
>       "void sym(void) {}
255c266,267
< " HAVE_SOLARIS_LD_VERSION_SCRIPT)
---
> "
>       HAVE_SOLARIS_LD_VERSION_SCRIPT)
261,262c273,274
< # Find symbol prefix.  Likely obsolete and unnecessary with recent
< # toolchains (it's not done in many other projects).
---
> # Find symbol prefix.  Likely obsolete and unnecessary with recent toolchains
> # (it's not done in many other projects).
266,269c278,282
<   execute_process(COMMAND "${CMAKE_C_COMPILER}" "-E" "-"
<                   INPUT_FILE /dev/null
<                   OUTPUT_VARIABLE OUT
<                   RESULT_VARIABLE STATUS)
---
>   execute_process(
>     COMMAND "${CMAKE_C_COMPILER}" "-E" "-"
>     INPUT_FILE /dev/null
>     OUTPUT_VARIABLE OUT
>     RESULT_VARIABLE STATUS)
282c295,296
<         string(REGEX REPLACE "(.*)__USER_LABEL_PREFIX__(.*)" "\\1\\2" prefix "${prefix}")
---
>         string(REGEX REPLACE "(.*)__USER_LABEL_PREFIX__(.*)" "\\1\\2" prefix
>                              "${prefix}")
289c303,305
<   set(SYMBOL_PREFIX "${SYMBOL_PREFIX}" PARENT_SCOPE)
---
>   set(SYMBOL_PREFIX
>       "${SYMBOL_PREFIX}"
>       PARENT_SCOPE)
300c316,318
< if(NOT AWK OR ANDROID OR IOS)
---
> if(NOT AWK
>    OR ANDROID
>    OR IOS)
307,318c325,333
<   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/checksym.awk
<                  ${CMAKE_CURRENT_BINARY_DIR}/scripts/checksym.awk
<                  @ONLY
<                  NEWLINE_STYLE LF)
<   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/options.awk
<                  ${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk
<                  @ONLY
<                  NEWLINE_STYLE LF)
<   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/scripts/dfn.awk
<                  ${CMAKE_CURRENT_BINARY_DIR}/scripts/dfn.awk
<                  @ONLY
<                  NEWLINE_STYLE LF)
---
>   configure_file(
>     ${CMAKE_CURRENT_SOURCE_DIR}/scripts/checksym.awk
>     ${CMAKE_CURRENT_BINARY_DIR}/scripts/checksym.awk @ONLY NEWLINE_STYLE LF)
>   configure_file(
>     ${CMAKE_CURRENT_SOURCE_DIR}/scripts/options.awk
>     ${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk @ONLY NEWLINE_STYLE LF)
>   configure_file(
>     ${CMAKE_CURRENT_SOURCE_DIR}/scripts/dfn.awk
>     ${CMAKE_CURRENT_BINARY_DIR}/scripts/dfn.awk @ONLY NEWLINE_STYLE LF)
320,321c335,336
<   # Generate .chk from .out with awk:
<   # generate_chk(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])
---
>   # Generate .chk from .out with awk: generate_chk(INPUT inputfile OUTPUT
>   # outputfile [DEPENDS dep1 [dep2...]])
327c342,343
<     cmake_parse_arguments(_GC "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
---
>     cmake_parse_arguments(_GC "${options}" "${oneValueArgs}"
>                           "${multiValueArgs}" ${ARGN})
335,341c351,356
<     add_custom_command(OUTPUT "${_GC_OUTPUT}"
<                        COMMAND "${CMAKE_COMMAND}"
<                                "-DINPUT=${_GC_INPUT}"
<                                "-DOUTPUT=${_GC_OUTPUT}"
<                                -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/genchk.cmake"
<                        DEPENDS "${_GC_INPUT}" ${_GC_DEPENDS}
<                        WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>     add_custom_command(
>       OUTPUT "${_GC_OUTPUT}"
>       COMMAND "${CMAKE_COMMAND}" "-DINPUT=${_GC_INPUT}" "-DOUTPUT=${_GC_OUTPUT}"
>               -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/genchk.cmake"
>       DEPENDS "${_GC_INPUT}" ${_GC_DEPENDS}
>       WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
344,345c359,360
<   # Generate .out from .c with awk
<   # generate_out(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])
---
>   # Generate .out from .c with awk generate_out(INPUT inputfile OUTPUT
>   # outputfile [DEPENDS dep1 [dep2...]])
350c365,366
<     cmake_parse_arguments(_GO "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
---
>     cmake_parse_arguments(_GO "${options}" "${oneValueArgs}"
>                           "${multiValueArgs}" ${ARGN})
358,364c374,379
<     add_custom_command(OUTPUT "${_GO_OUTPUT}"
<                        COMMAND "${CMAKE_COMMAND}"
<                                "-DINPUT=${_GO_INPUT}"
<                                "-DOUTPUT=${_GO_OUTPUT}"
<                                -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/genout.cmake"
<                        DEPENDS "${_GO_INPUT}" ${_GO_DEPENDS}
<                        WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>     add_custom_command(
>       OUTPUT "${_GO_OUTPUT}"
>       COMMAND "${CMAKE_COMMAND}" "-DINPUT=${_GO_INPUT}" "-DOUTPUT=${_GO_OUTPUT}"
>               -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/genout.cmake"
>       DEPENDS "${_GO_INPUT}" ${_GO_DEPENDS}
>       WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
367,368c382,383
<   # Generate specific source file with awk
<   # generate_source(OUTPUT outputfile [DEPENDS dep1 [dep2...]])
---
>   # Generate specific source file with awk generate_source(OUTPUT outputfile
>   # [DEPENDS dep1 [dep2...]])
373c388,389
<     cmake_parse_arguments(_GSO "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
---
>     cmake_parse_arguments(_GSO "${options}" "${oneValueArgs}"
>                           "${multiValueArgs}" ${ARGN})
378,383c394,399
<     add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${_GSO_OUTPUT}"
<                        COMMAND "${CMAKE_COMMAND}"
<                                "-DOUTPUT=${_GSO_OUTPUT}"
<                                -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake"
<                        DEPENDS ${_GSO_DEPENDS}
<                        WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>     add_custom_command(
>       OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${_GSO_OUTPUT}"
>       COMMAND "${CMAKE_COMMAND}" "-DOUTPUT=${_GSO_OUTPUT}" -P
>               "${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake"
>       DEPENDS ${_GSO_DEPENDS}
>       WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
386,387c402,403
<   # Copy file
<   # generate_copy(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])
---
>   # Copy file generate_copy(INPUT inputfile OUTPUT outputfile [DEPENDS dep1
>   # [dep2...]])
392,398c408,414
<     cmake_parse_arguments(_GCO "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
<     add_custom_command(OUTPUT "${_GCO_OUTPUT}"
<                        COMMAND "${CMAKE_COMMAND}"
<                                -E remove "${_GCO_OUTPUT}"
<                        COMMAND "${CMAKE_COMMAND}"
<                                -E copy "${_GCO_INPUT}" "${_GCO_OUTPUT}"
<                        DEPENDS "${source}" ${_GCO_DEPENDS})
---
>     cmake_parse_arguments(_GCO "${options}" "${oneValueArgs}"
>                           "${multiValueArgs}" ${ARGN})
>     add_custom_command(
>       OUTPUT "${_GCO_OUTPUT}"
>       COMMAND "${CMAKE_COMMAND}" -E remove "${_GCO_OUTPUT}"
>       COMMAND "${CMAKE_COMMAND}" -E copy "${_GCO_INPUT}" "${_GCO_OUTPUT}"
>       DEPENDS "${source}" ${_GCO_DEPENDS})
402,406c418,426
<   generate_source(OUTPUT "scripts/pnglibconf.c"
<                   DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.dfa"
<                           "${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk"
<                           "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h")
<   add_custom_target(scripts_pnglibconf_c DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/pnglibconf.c")
---
>   generate_source(
>     OUTPUT
>     "scripts/pnglibconf.c"
>     DEPENDS
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.dfa"
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk"
>     "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h")
>   add_custom_target(scripts_pnglibconf_c
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/pnglibconf.c")
409,413c429,437
<   generate_source(OUTPUT "pnglibconf.c"
<                   DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.dfa"
<                           "${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk"
<                           "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h")
<   add_custom_target(pnglibconf_c DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c")
---
>   generate_source(
>     OUTPUT
>     "pnglibconf.c"
>     DEPENDS
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.dfa"
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/options.awk"
>     "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h")
>   add_custom_target(pnglibconf_c
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c")
423,426c447,451
<   generate_out(INPUT "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out"
<                DEPENDS pnglibconf_c)
<   add_custom_target(pnglibconf_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out")
---
>   generate_out(
>     INPUT "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c" OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out" DEPENDS pnglibconf_c)
>   add_custom_target(pnglibconf_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out")
429,444c454,482
<   generate_source(OUTPUT "pnglibconf.h"
<                   DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out" pnglibconf_out
<                           ${PNGLIBCONF_H_EXTRA_DEPENDS})
<   add_custom_target(pnglibconf_h DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h")
< 
<   generate_out(INPUT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/intprefix.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out"
<                DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h" pnglibconf_h)
<   add_custom_target(scripts_intprefix_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out")
< 
<   generate_out(INPUT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/prefix.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out"
<                DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
<                        "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
<                        "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out" pnglibconf_out)
<   add_custom_target(scripts_prefix_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out")
---
>   generate_source(
>     OUTPUT "pnglibconf.h" DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out"
>     pnglibconf_out ${PNGLIBCONF_H_EXTRA_DEPENDS})
>   add_custom_target(pnglibconf_h
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h")
> 
>   generate_out(
>     INPUT
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/intprefix.c"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out"
>     DEPENDS
>     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h"
>     pnglibconf_h)
>   add_custom_target(scripts_intprefix_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out")
> 
>   generate_out(
>     INPUT
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/prefix.c"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out"
>     DEPENDS
>     "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
>     "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
>     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out"
>     pnglibconf_out)
>   add_custom_target(scripts_prefix_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out")
447,474c485,533
<   generate_source(OUTPUT "pngprefix.h"
<                   DEPENDS ${PNGPREFIX_H_EXTRA_DEPENDS})
<   add_custom_target(pngprefix_h DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pngprefix.h")
< 
<   generate_out(INPUT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/sym.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out"
<                DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h" pnglibconf_h)
<   add_custom_target(scripts_sym_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out")
< 
<   generate_out(INPUT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/symbols.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out"
<                DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
<                        "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
<                        "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.h.prebuilt")
<   add_custom_target(scripts_symbols_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out")
< 
<   generate_out(INPUT "${CMAKE_CURRENT_SOURCE_DIR}/scripts/vers.c"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out"
<                DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
<                        "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
<                        "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h" pnglibconf_h)
<   add_custom_target(scripts_vers_out DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out")
< 
<   generate_chk(INPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out"
<                OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.chk"
<                DEPENDS scripts_symbols_out
<                        "${CMAKE_CURRENT_BINARY_DIR}/scripts/checksym.awk"
<                        "${CMAKE_CURRENT_SOURCE_DIR}/scripts/symbols.def")
---
>   generate_source(OUTPUT "pngprefix.h" DEPENDS ${PNGPREFIX_H_EXTRA_DEPENDS})
>   add_custom_target(pngprefix_h
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/pngprefix.h")
> 
>   generate_out(
>     INPUT
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/sym.c"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out"
>     DEPENDS
>     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h"
>     pnglibconf_h)
>   add_custom_target(scripts_sym_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out")
> 
>   generate_out(
>     INPUT
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/symbols.c"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out"
>     DEPENDS
>     "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
>     "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/pnglibconf.h.prebuilt")
>   add_custom_target(scripts_symbols_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out")
> 
>   generate_out(
>     INPUT
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/vers.c"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out"
>     DEPENDS
>     "${CMAKE_CURRENT_SOURCE_DIR}/png.h"
>     "${CMAKE_CURRENT_SOURCE_DIR}/pngconf.h"
>     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h"
>     pnglibconf_h)
>   add_custom_target(scripts_vers_out
>                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out")
> 
>   generate_chk(
>     INPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out"
>     OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.chk"
>     DEPENDS
>     scripts_symbols_out
>     "${CMAKE_CURRENT_BINARY_DIR}/scripts/checksym.awk"
>     "${CMAKE_CURRENT_SOURCE_DIR}/scripts/symbols.def")
479,495c538,552
<   generate_copy(INPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out"
<                 OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym"
<                 DEPENDS scripts_sym_out)
<   generate_copy(INPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out"
<                 OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers"
<                 DEPENDS scripts_vers_out)
< 
<   add_custom_target(genvers
<                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers")
<   add_custom_target(gensym
<                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym")
< 
<   add_custom_target("genprebuilt"
<                     COMMAND "${CMAKE_COMMAND}"
<                             "-DOUTPUT=scripts/pnglibconf.h.prebuilt"
<                             -P "${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake"
<                     WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>   generate_copy(
>     INPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out" OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym" DEPENDS scripts_sym_out)
>   generate_copy(
>     INPUT "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out" OUTPUT
>     "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers" DEPENDS scripts_vers_out)
> 
>   add_custom_target(genvers DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers")
>   add_custom_target(gensym DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym")
> 
>   add_custom_target(
>     "genprebuilt"
>     COMMAND "${CMAKE_COMMAND}" "-DOUTPUT=scripts/pnglibconf.h.prebuilt" -P
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake"
>     WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
498,512c555,586
<   add_custom_target(genfiles
<                     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym" gensym
<                             "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers" genvers
<                             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c" pnglibconf_c
<                             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h" pnglibconf_h
<                             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out" pnglibconf_out
<                             "${CMAKE_CURRENT_BINARY_DIR}/pngprefix.h" pngprefix_h
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out" scripts_intprefix_out
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/pnglibconf.c" scripts_pnglibconf_c
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out" scripts_prefix_out
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out" scripts_sym_out
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.chk" scripts_symbols_chk
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out" scripts_symbols_out
<                             "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out" scripts_vers_out)
< endif(NOT AWK OR ANDROID OR IOS)
---
>   add_custom_target(
>     genfiles
>     DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/libpng.sym"
>             gensym
>             "${CMAKE_CURRENT_BINARY_DIR}/libpng.vers"
>             genvers
>             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.c"
>             pnglibconf_c
>             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h"
>             pnglibconf_h
>             "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.out"
>             pnglibconf_out
>             "${CMAKE_CURRENT_BINARY_DIR}/pngprefix.h"
>             pngprefix_h
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/intprefix.out"
>             scripts_intprefix_out
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/pnglibconf.c"
>             scripts_pnglibconf_c
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/prefix.out"
>             scripts_prefix_out
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/sym.out"
>             scripts_sym_out
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.chk"
>             scripts_symbols_chk
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/symbols.out"
>             scripts_symbols_out
>             "${CMAKE_CURRENT_BINARY_DIR}/scripts/vers.out"
>             scripts_vers_out)
> endif(
>   NOT AWK
>   OR ANDROID
>   OR IOS)
515,526c589,594
< set(libpng_public_hdrs
<     png.h
<     pngconf.h
<     "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h"
< )
< set(libpng_private_hdrs
<     pngpriv.h
<     pngdebug.h
<     pnginfo.h
<     pngstruct.h
< )
< if(AWK AND NOT ANDROID AND NOT IOS)
---
> set(libpng_public_hdrs png.h pngconf.h
>                        "${CMAKE_CURRENT_BINARY_DIR}/pnglibconf.h")
> set(libpng_private_hdrs pngpriv.h pngdebug.h pnginfo.h pngstruct.h)
> if(AWK
>    AND NOT ANDROID
>    AND NOT IOS)
550,572c618,625
<     ${libpng_powerpc_sources}
< )
< set(pngtest_sources
<     pngtest.c
< )
< set(pngvalid_sources
<     contrib/libtests/pngvalid.c
< )
< set(pngstest_sources
<     contrib/libtests/pngstest.c
< )
< set(pngunknown_sources
<     contrib/libtests/pngunknown.c
< )
< set(pngimage_sources
<     contrib/libtests/pngimage.c
< )
< set(pngfix_sources
<     contrib/tools/pngfix.c
< )
< set(png_fix_itxt_sources
<     contrib/tools/png-fix-itxt.c
< )
---
>     ${libpng_powerpc_sources})
> set(pngtest_sources pngtest.c)
> set(pngvalid_sources contrib/libtests/pngvalid.c)
> set(pngstest_sources contrib/libtests/pngstest.c)
> set(pngunknown_sources contrib/libtests/pngunknown.c)
> set(pngimage_sources contrib/libtests/pngimage.c)
> set(pngfix_sources contrib/tools/pngfix.c)
> set(png_fix_itxt_sources contrib/tools/png-fix-itxt.c)
601,602c654,658
<       set_target_properties(png PROPERTIES
<                             LINK_FLAGS "-Wl,--version-script='${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
---
>       set_target_properties(
>         png
>         PROPERTIES
>           LINK_FLAGS
>           "-Wl,--version-script='${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
604,605c660,662
<       set_target_properties(png PROPERTIES
<                             LINK_FLAGS "-Wl,-M -Wl,'${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
---
>       set_target_properties(
>         png PROPERTIES LINK_FLAGS
>                        "-Wl,-M -Wl,'${CMAKE_CURRENT_BINARY_DIR}/libpng.vers'")
615,617c672,674
<   # MSVC doesn't use a different file extension for shared vs. static
<   # libs. We are able to change OUTPUT_NAME to remove the _static
<   # for all other platforms.
---
>   # MSVC doesn't use a different file extension for shared vs. static libs. We
>   # are able to change OUTPUT_NAME to remove the _static for all other
>   # platforms.
619,621c676,677
<     set_target_properties(png_static PROPERTIES
<                           OUTPUT_NAME "${PNG_LIB_NAME}"
<                           CLEAN_DIRECT_OUTPUT 1)
---
>     set_target_properties(png_static PROPERTIES OUTPUT_NAME "${PNG_LIB_NAME}"
>                                                 CLEAN_DIRECT_OUTPUT 1)
623,625c679,681
<     set_target_properties(png_static PROPERTIES
<                           OUTPUT_NAME "${PNG_LIB_NAME}_static"
<                           CLEAN_DIRECT_OUTPUT 1)
---
>     set_target_properties(
>       png_static PROPERTIES OUTPUT_NAME "${PNG_LIB_NAME}_static"
>                             CLEAN_DIRECT_OUTPUT 1)
640,648c696,706
<   set_target_properties(png_framework PROPERTIES
<                         FRAMEWORK TRUE
<                         FRAMEWORK_VERSION ${PNGLIB_VERSION}
<                         MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PNGLIB_MAJOR}.${PNGLIB_MINOR}
<                         MACOSX_FRAMEWORK_BUNDLE_VERSION ${PNGLIB_VERSION}
<                         MACOSX_FRAMEWORK_IDENTIFIER org.libpng.libpng
<                         XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
<                         PUBLIC_HEADER "${libpng_public_hdrs}"
<                         OUTPUT_NAME png)
---
>   set_target_properties(
>     png_framework
>     PROPERTIES FRAMEWORK TRUE
>                FRAMEWORK_VERSION ${PNGLIB_VERSION}
>                MACOSX_FRAMEWORK_SHORT_VERSION_STRING
>                ${PNGLIB_MAJOR}.${PNGLIB_MINOR}
>                MACOSX_FRAMEWORK_BUNDLE_VERSION ${PNGLIB_VERSION}
>                MACOSX_FRAMEWORK_IDENTIFIER org.libpng.libpng
>                XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
>                PUBLIC_HEADER "${libpng_public_hdrs}"
>                OUTPUT_NAME png)
659,660c717
<   set_target_properties(png PROPERTIES
<                         DEFINE_SYMBOL PNG_BUILD_DLL)
---
>   set_target_properties(png PROPERTIES DEFINE_SYMBOL PNG_BUILD_DLL)
667c724,725
<   cmake_parse_arguments(_PAT "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
---
>   cmake_parse_arguments(_PAT "${options}" "${oneValueArgs}" "${multiValueArgs}"
>                         ${ARGN})
680,686c738,744
<                  "${CMAKE_CURRENT_BINARY_DIR}/tests/${_PAT_NAME}.cmake"
<                  @ONLY)
<   add_test(NAME "${_PAT_NAME}"
<            COMMAND "${CMAKE_COMMAND}"
<                    "-DLIBPNG=$<TARGET_FILE:png>"
<                    "-DTEST_COMMAND=$<TARGET_FILE:${_PAT_COMMAND}>"
<                    -P "${CMAKE_CURRENT_BINARY_DIR}/tests/${_PAT_NAME}.cmake")
---
>                  "${CMAKE_CURRENT_BINARY_DIR}/tests/${_PAT_NAME}.cmake" @ONLY)
>   add_test(
>     NAME "${_PAT_NAME}"
>     COMMAND
>       "${CMAKE_COMMAND}" "-DLIBPNG=$<TARGET_FILE:png>"
>       "-DTEST_COMMAND=$<TARGET_FILE:${_PAT_COMMAND}>" -P
>       "${CMAKE_CURRENT_BINARY_DIR}/tests/${_PAT_NAME}.cmake")
690,691c748,749
<   # Find test PNG files by globbing, but sort lists to ensure
<   # consistency between different filesystems.
---
>   # Find test PNG files by globbing, but sort lists to ensure consistency
>   # between different filesystems.
702,704c760
<   png_add_test(NAME pngtest
<                COMMAND pngtest
<                FILES "${PNGTEST_PNG}")
---
>   png_add_test(NAME pngtest COMMAND pngtest FILES "${PNGTEST_PNG}")
709,750c765,826
<   png_add_test(NAME pngvalid-gamma-16-to-8
<                COMMAND pngvalid
<                OPTIONS --gamma-16-to-8)
<   png_add_test(NAME pngvalid-gamma-alpha-mode
<                COMMAND pngvalid
<                OPTIONS --gamma-alpha-mode)
<   png_add_test(NAME pngvalid-gamma-background
<                COMMAND pngvalid
<                OPTIONS --gamma-background)
<   png_add_test(NAME pngvalid-gamma-expand16-alpha-mode
<                COMMAND pngvalid
<                OPTIONS --gamma-alpha-mode --expand16)
<   png_add_test(NAME pngvalid-gamma-expand16-background
<                COMMAND pngvalid
<                OPTIONS --gamma-background --expand16)
<   png_add_test(NAME pngvalid-gamma-expand16-transform
<                COMMAND pngvalid
<                OPTIONS --gamma-transform --expand16)
<   png_add_test(NAME pngvalid-gamma-sbit
<                COMMAND pngvalid
<                OPTIONS --gamma-sbit)
<   png_add_test(NAME pngvalid-gamma-threshold
<                COMMAND pngvalid
<                OPTIONS --gamma-threshold)
<   png_add_test(NAME pngvalid-gamma-transform
<                COMMAND pngvalid
<                OPTIONS --gamma-transform)
<   png_add_test(NAME pngvalid-progressive-interlace-standard
<                COMMAND pngvalid
<                OPTIONS --standard --progressive-read --interlace)
<   png_add_test(NAME pngvalid-progressive-size
<                COMMAND pngvalid
<                OPTIONS --size --progressive-read)
<   png_add_test(NAME pngvalid-progressive-standard
<                COMMAND pngvalid
<                OPTIONS --standard --progressive-read)
<   png_add_test(NAME pngvalid-standard
<                COMMAND pngvalid
<                OPTIONS --standard)
<   png_add_test(NAME pngvalid-transform
<                COMMAND pngvalid
<                OPTIONS --transform)
---
>   png_add_test(NAME pngvalid-gamma-16-to-8 COMMAND pngvalid OPTIONS
>                --gamma-16-to-8)
>   png_add_test(NAME pngvalid-gamma-alpha-mode COMMAND pngvalid OPTIONS
>                --gamma-alpha-mode)
>   png_add_test(NAME pngvalid-gamma-background COMMAND pngvalid OPTIONS
>                --gamma-background)
>   png_add_test(
>     NAME
>     pngvalid-gamma-expand16-alpha-mode
>     COMMAND
>     pngvalid
>     OPTIONS
>     --gamma-alpha-mode
>     --expand16)
>   png_add_test(
>     NAME
>     pngvalid-gamma-expand16-background
>     COMMAND
>     pngvalid
>     OPTIONS
>     --gamma-background
>     --expand16)
>   png_add_test(
>     NAME
>     pngvalid-gamma-expand16-transform
>     COMMAND
>     pngvalid
>     OPTIONS
>     --gamma-transform
>     --expand16)
>   png_add_test(NAME pngvalid-gamma-sbit COMMAND pngvalid OPTIONS --gamma-sbit)
>   png_add_test(NAME pngvalid-gamma-threshold COMMAND pngvalid OPTIONS
>                --gamma-threshold)
>   png_add_test(NAME pngvalid-gamma-transform COMMAND pngvalid OPTIONS
>                --gamma-transform)
>   png_add_test(
>     NAME
>     pngvalid-progressive-interlace-standard
>     COMMAND
>     pngvalid
>     OPTIONS
>     --standard
>     --progressive-read
>     --interlace)
>   png_add_test(
>     NAME
>     pngvalid-progressive-size
>     COMMAND
>     pngvalid
>     OPTIONS
>     --size
>     --progressive-read)
>   png_add_test(
>     NAME
>     pngvalid-progressive-standard
>     COMMAND
>     pngvalid
>     OPTIONS
>     --standard
>     --progressive-read)
>   png_add_test(NAME pngvalid-standard COMMAND pngvalid OPTIONS --standard)
>   png_add_test(NAME pngvalid-transform COMMAND pngvalid OPTIONS --transform)
800,803c876,886
<       png_add_test(NAME pngstest-${gamma_type}-${alpha_type}
<                    COMMAND pngstest
<                    OPTIONS --tmpfile "${gamma_type}-${alpha_type}-" --log
<                    FILES ${PNGSTEST_FILES})
---
>       png_add_test(
>         NAME
>         pngstest-${gamma_type}-${alpha_type}
>         COMMAND
>         pngstest
>         OPTIONS
>         --tmpfile
>         "${gamma_type}-${alpha_type}-"
>         --log
>         FILES
>         ${PNGSTEST_FILES})
810,837c893,969
<   png_add_test(NAME pngunknown-discard
<                COMMAND pngunknown
<                OPTIONS --strict default=discard
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-IDAT
<                COMMAND pngunknown
<                OPTIONS --strict default=discard IDAT=save
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-if-safe
<                COMMAND pngunknown
<                OPTIONS --strict default=if-safe
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-sAPI
<                COMMAND pngunknown
<                OPTIONS --strict bKGD=save cHRM=save gAMA=save all=discard iCCP=save sBIT=save sRGB=save
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-save
<                COMMAND pngunknown
<                OPTIONS --strict default=save
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-sTER
<                COMMAND pngunknown
<                OPTIONS --strict sTER=if-safe
<                FILES "${PNGTEST_PNG}")
<   png_add_test(NAME pngunknown-vpAg
<                COMMAND pngunknown
<                OPTIONS --strict vpAg=if-safe
<                FILES "${PNGTEST_PNG}")
---
>   png_add_test(
>     NAME
>     pngunknown-discard
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     default=discard
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-IDAT
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     default=discard
>     IDAT=save
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-if-safe
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     default=if-safe
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-sAPI
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     bKGD=save
>     cHRM=save
>     gAMA=save
>     all=discard
>     iCCP=save
>     sBIT=save
>     sRGB=save
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-save
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     default=save
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-sTER
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     sTER=if-safe
>     FILES
>     "${PNGTEST_PNG}")
>   png_add_test(
>     NAME
>     pngunknown-vpAg
>     COMMAND
>     pngunknown
>     OPTIONS
>     --strict
>     vpAg=if-safe
>     FILES
>     "${PNGTEST_PNG}")
842,849c974,994
<   png_add_test(NAME pngimage-quick
<                COMMAND pngimage
<                OPTIONS --list-combos --log
<                FILES ${PNGSUITE_PNGS})
<   png_add_test(NAME pngimage-full
<                COMMAND pngimage
<                OPTIONS --exhaustive --list-combos --log
<                FILES ${PNGSUITE_PNGS})
---
>   png_add_test(
>     NAME
>     pngimage-quick
>     COMMAND
>     pngimage
>     OPTIONS
>     --list-combos
>     --log
>     FILES
>     ${PNGSUITE_PNGS})
>   png_add_test(
>     NAME
>     pngimage-full
>     COMMAND
>     pngimage
>     OPTIONS
>     --exhaustive
>     --list-combos
>     --log
>     FILES
>     ${PNGSUITE_PNGS})
862,863c1007,1008
< # Creates a symlink from src to dest (if possible), or, alternatively,
< # copies src to dest if different.
---
> # Creates a symlink from src to dest (if possible), or, alternatively, copies
> # src to dest if different.
873,875c1018,1022
<     message(FATAL_ERROR "create_symlink: "
<                         "Both source file ${S_FILE} and build target ${S_TARGET} arguments are present; "
<                         "can only have one")
---
>     message(
>       FATAL_ERROR
>         "create_symlink: "
>         "Both source file ${S_FILE} and build target ${S_TARGET} arguments are present; "
>         "can only have one")
882,885c1029,1031
<       execute_process(COMMAND "${CMAKE_COMMAND}"
<                               -E copy_if_different
<                               ${S_FILE} ${DEST_FILE}
<                       WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>       execute_process(
>         COMMAND "${CMAKE_COMMAND}" -E copy_if_different ${S_FILE} ${DEST_FILE}
>         WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
887,890c1033,1035
<       execute_process(COMMAND "${CMAKE_COMMAND}"
<                               -E create_symlink
<                               ${S_FILE} ${DEST_FILE}
<                       WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
---
>       execute_process(
>         COMMAND "${CMAKE_COMMAND}" -E create_symlink ${S_FILE} ${DEST_FILE}
>         WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
895,896c1040,1041
<     # We need to use generator expressions, which can be a bit tricky.
<     # For simplicity, make the symlink a POST_BUILD step, and use the TARGET
---
>     # We need to use generator expressions, which can be a bit tricky. For
>     # simplicity, make the symlink a POST_BUILD step, and use the TARGET
899,904c1044,1050
<       add_custom_command(TARGET ${S_TARGET}
<                          POST_BUILD
<                          COMMAND "${CMAKE_COMMAND}"
<                                  -E copy_if_different
<                                  $<TARGET_LINKER_FILE_NAME:${S_TARGET}>
<                                  $<TARGET_LINKER_FILE_DIR:${S_TARGET}>/${DEST_FILE})
---
>       add_custom_command(
>         TARGET ${S_TARGET}
>         POST_BUILD
>         COMMAND
>           "${CMAKE_COMMAND}" -E copy_if_different
>           $<TARGET_LINKER_FILE_NAME:${S_TARGET}>
>           $<TARGET_LINKER_FILE_DIR:${S_TARGET}>/${DEST_FILE})
906,911c1052,1058
<       add_custom_command(TARGET ${S_TARGET}
<                          POST_BUILD
<                          COMMAND "${CMAKE_COMMAND}"
<                                  -E create_symlink
<                                  $<TARGET_LINKER_FILE_NAME:${S_TARGET}>
<                                  $<TARGET_LINKER_FILE_DIR:${S_TARGET}>/${DEST_FILE})
---
>       add_custom_command(
>         TARGET ${S_TARGET}
>         POST_BUILD
>         COMMAND
>           "${CMAKE_COMMAND}" -E create_symlink
>           $<TARGET_LINKER_FILE_NAME:${S_TARGET}>
>           $<TARGET_LINKER_FILE_DIR:${S_TARGET}>/${DEST_FILE})
918,919c1065
<                ${CMAKE_CURRENT_BINARY_DIR}/scripts/genchk.cmake
<                @ONLY)
---
>                ${CMAKE_CURRENT_BINARY_DIR}/scripts/genchk.cmake @ONLY)
921,922c1067
<                ${CMAKE_CURRENT_BINARY_DIR}/scripts/genout.cmake
<                @ONLY)
---
>                ${CMAKE_CURRENT_BINARY_DIR}/scripts/genout.cmake @ONLY)
924,925c1069
<                ${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake
<                @ONLY)
---
>                ${CMAKE_CURRENT_BINARY_DIR}/scripts/gensrc.cmake @ONLY)
932,937c1076,1082
< # Create pkgconfig files.
< # We use the same files like ./configure, so we have to set its vars.
< # Only do this on Windows for Cygwin - the files don't make much sense
< # outside of a UNIX look-alike.
< if(NOT WIN32 OR CYGWIN OR MINGW)
<   set(prefix      ${CMAKE_INSTALL_PREFIX})
---
> # Create pkgconfig files. We use the same files like ./configure, so we have to
> # set its vars. Only do this on Windows for Cygwin - the files don't make much
> # sense outside of a UNIX look-alike.
> if(NOT WIN32
>    OR CYGWIN
>    OR MINGW)
>   set(prefix ${CMAKE_INSTALL_PREFIX})
939,941c1084,1086
<   set(libdir      ${CMAKE_INSTALL_FULL_LIBDIR})
<   set(includedir  ${CMAKE_INSTALL_FULL_INCLUDEDIR})
<   set(LIBS        "-lz -lm")
---
>   set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})
>   set(includedir ${CMAKE_INSTALL_FULL_INCLUDEDIR})
>   set(LIBS "-lz -lm")
943,944c1088
<                  ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}.pc
<                  @ONLY)
---
>                  ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}.pc @ONLY)
947,948c1091
<                  ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}-config
<                  @ONLY)
---
>                  ${CMAKE_CURRENT_BINARY_DIR}/${PNGLIB_NAME}-config @ONLY)
954,957c1097,1101
<   set_target_properties(png PROPERTIES
<     VERSION ${PNGLIB_SHARED_VERSION}
<     SOVERSION ${PNGLIB_SHARED_SOVERSION}
<     CLEAN_DIRECT_OUTPUT 1)
---
>   set_target_properties(
>     png
>     PROPERTIES VERSION ${PNGLIB_SHARED_VERSION}
>                SOVERSION ${PNGLIB_SHARED_SOVERSION}
>                CLEAN_DIRECT_OUTPUT 1)
962,967c1106,1112
<   install(TARGETS ${PNG_LIB_TARGETS}
<           EXPORT libpng
<           RUNTIME DESTINATION bin
<           LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
<           ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
<           FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR})
---
>   install(
>     TARGETS ${PNG_LIB_TARGETS}
>     EXPORT libpng
>     RUNTIME DESTINATION bin
>     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
>     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
>     FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR})
973,974c1118,1120
<       install(FILES $<TARGET_LINKER_FILE_DIR:png>/libpng${CMAKE_IMPORT_LIBRARY_SUFFIX}
<               DESTINATION ${CMAKE_INSTALL_LIBDIR})
---
>       install(
>         FILES $<TARGET_LINKER_FILE_DIR:png>/libpng${CMAKE_IMPORT_LIBRARY_SUFFIX}
>         DESTINATION ${CMAKE_INSTALL_LIBDIR})
979,980c1125,1127
<       install(FILES $<TARGET_LINKER_FILE_DIR:png>/libpng${CMAKE_SHARED_LIBRARY_SUFFIX}
<               DESTINATION ${CMAKE_INSTALL_LIBDIR})
---
>       install(
>         FILES $<TARGET_LINKER_FILE_DIR:png>/libpng${CMAKE_SHARED_LIBRARY_SUFFIX}
>         DESTINATION ${CMAKE_INSTALL_LIBDIR})
985c1132,1134
<     if(NOT WIN32 OR CYGWIN OR MINGW)
---
>     if(NOT WIN32
>        OR CYGWIN
>        OR MINGW)
987,988c1136,1139
<       install(FILES $<TARGET_LINKER_FILE_DIR:png_static>/libpng${CMAKE_STATIC_LIBRARY_SUFFIX}
<               DESTINATION ${CMAKE_INSTALL_LIBDIR})
---
>       install(
>         FILES
>           $<TARGET_LINKER_FILE_DIR:png_static>/libpng${CMAKE_STATIC_LIBRARY_SUFFIX}
>         DESTINATION ${CMAKE_INSTALL_LIBDIR})
994,997c1145,1146
<   install(FILES ${libpng_public_hdrs}
<           DESTINATION include)
<   install(FILES ${libpng_public_hdrs}
<           DESTINATION include/${PNGLIB_NAME})
---
>   install(FILES ${libpng_public_hdrs} DESTINATION include)
>   install(FILES ${libpng_public_hdrs} DESTINATION include/${PNGLIB_NAME})
1000,1002c1149,1152
<   if(NOT WIN32 OR CYGWIN OR MINGW)
<     install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config
<             DESTINATION bin)
---
>   if(NOT WIN32
>      OR CYGWIN
>      OR MINGW)
>     install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/libpng-config DESTINATION bin)
1009,1010c1159
<   install(TARGETS ${PNG_BIN_TARGETS}
<           RUNTIME DESTINATION bin)
---
>   install(TARGETS ${PNG_BIN_TARGETS} RUNTIME DESTINATION bin)
1015,1018c1164,1165
<   install(FILES libpng.3 libpngpf.3
<           DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
<   install(FILES png.5
<           DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
---
>   install(FILES libpng.3 libpngpf.3 DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
>   install(FILES png.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
1020c1167,1169
<   if(NOT CMAKE_HOST_WIN32 OR CYGWIN OR MINGW)
---
>   if(NOT CMAKE_HOST_WIN32
>      OR CYGWIN
>      OR MINGW)
1034,1036c1183,1186
<   install(EXPORT libpng
<           DESTINATION lib/libpng
<           FILE lib${PNG_LIB_NAME}.cmake)
---
>   install(
>     EXPORT libpng
>     DESTINATION lib/libpng
>     FILE lib${PNG_LIB_NAME}.cmake)
1039,1041c1189,1196
< # TODO: Create MSVC import lib for MinGW-compiled shared lib.
< # pexports libpng.dll > libpng.def
< # lib /def:libpng.def /machine:x86
---
> add_fuzz_test(my_fuzz_test_1 my_fuzz_test_1.cpp)
> # add_fuzz_test(my_fuzz_test_1 my_fuzz_test_1.cpp png_mutator.cpp)
> target_link_libraries(my_fuzz_test_1 PRIVATE ${ZLIB_LIBRARY} ${M_LIBRARY} png16)
> target_include_directories(my_fuzz_test_1 PRIVATE .)
> target_compile_options(my_fuzz_test_1 PRIVATE)
> 
> # TODO: Create MSVC import lib for MinGW-compiled shared lib. pexports
> # libpng.dll > libpng.def lib /def:libpng.def /machine:x86
